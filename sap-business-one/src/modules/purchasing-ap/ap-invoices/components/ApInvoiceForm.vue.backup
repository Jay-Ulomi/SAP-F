<template>
  <form @submit.prevent="handleSubmit" class="space-y-6">
    <!-- Header Information -->
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-lg font-semibold text-gray-900">A/P Invoice</h2>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
        <!-- Series -->
        <div>
          <label for="series" class="block text-sm font-medium text-gray-700 mb-1">
            Series
          </label>
          <input
            id="series"
            v-model="formData.series"
            type="text"
            placeholder="Local Purchase"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900 placeholder-gray-700"
          />
        </div>

        <!-- Posting Date -->
        <div>
          <label for="postingDate" class="block text-sm font-medium text-gray-700 mb-1">
            Posting Date *
          </label>
          <input
            id="postingDate"
            v-model="formData.postingDate"
            type="date"
            required
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900"
          />
        </div>

        <!-- Valid Till -->
        <div>
          <label for="validTill" class="block text-sm font-medium text-gray-700 mb-1">
            Valid Till
          </label>
          <input
            id="validTill"
            v-model="formData.validTill"
            type="date"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900"
          />
        </div>

        <!-- Document Date -->
        <div>
          <label for="documentDate" class="block text-sm font-medium text-gray-700 mb-1">
            Document Date *
          </label>
          <input
            id="documentDate"
            v-model="formData.documentDate"
            type="date"
            required
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900"
          />
        </div>

        <!-- Required Date -->
        <div>
          <label for="requiredDate" class="block text-sm font-medium text-gray-700 mb-1">
            Required Date
          </label>
          <input
            id="requiredDate"
            v-model="formData.requiredDate"
            type="date"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900"
          />
        </div>

        <!-- Vendor Code -->
        <div>
          <label for="vendorCode" class="block text-sm font-medium text-gray-700 mb-1">
            Vendor Code
          </label>
          <input
            id="vendorCode"
            v-model="formData.vendorCode"
            type="text"
            placeholder="HCL-C0025"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900 placeholder-gray-700"
          />
        </div>

        <!-- Vendor Name -->
        <div>
          <label for="vendorName" class="block text-sm font-medium text-gray-700 mb-1">
            Vendor Name
          </label>
          <input
            id="vendorName"
            v-model="formData.vendorName"
            type="text"
            placeholder="Vendor Name"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900 placeholder-gray-700"
          />
        </div>

        <!-- Contact Person -->
        <div>
          <label for="contactPerson" class="block text-sm font-medium text-gray-700 mb-1">
            Contact Person
          </label>
          <input
            id="contactPerson"
            v-model="formData.contactPerson"
            type="text"
            placeholder="Contact Person"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900 placeholder-gray-700"
          />
        </div>

        <!-- Reference No -->
        <div>
          <label for="referenceNo" class="block text-sm font-medium text-gray-700 mb-1">
            Reference No.
          </label>
          <input
            id="referenceNo"
            v-model="formData.referenceNo"
            type="text"
            placeholder="001258"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900 placeholder-gray-700"
          />
        </div>

        <!-- Request Type -->
        <div>
          <label for="requestType" class="block text-sm font-medium text-gray-700 mb-1">
            Request Type
          </label>
          <input
            id="requestType"
            v-model="formData.requestType"
            type="text"
            placeholder="Item"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900 placeholder-gray-700"
          />
        </div>

        <!-- Currency -->
        <div>
          <label for="currency" class="block text-sm font-medium text-gray-700 mb-1">
            Currency
          </label>
          <select
            id="currency"
            v-model="formData.currency"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900"
          >
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
            <option value="GBP">GBP</option>
          </select>
        </div>

        <!-- Remarks -->
        <div class="md:col-span-2">
          <label for="remarks" class="block text-sm font-medium text-gray-700 mb-1">
            Remarks
          </label>
          <textarea
            id="remarks"
            v-model="formData.remarks"
            rows="2"
            placeholder="Invoice created for procurement needs"
            class="block w-full rounded-md border-gray-300 shadow-sm focus:border-gray-400 focus:ring-gray-400 text-sm text-gray-900 placeholder-gray-700"
          ></textarea>
      </div>
    </div>

    <!-- Line Items -->
    <div class="bg-white rounded-lg shadow p-4">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center space-x-4">
          <h4 class="text-lg font-medium text-gray-900">Line Items</h4>
          <div class="flex items-center space-x-2">
            <label for="invoiceType" class="text-sm font-medium text-gray-700">
              Type:
            </label>
            <select
              id="invoiceType"
              v-model="formData.type"
              class="text-sm border-gray-300 rounded-md focus:border-gray-400 focus:ring-gray-400 text-gray-900"
            >
              <option value="Item">Item</option>
              <option value="Service">Service</option>
            </select>
          </div>
        </div>
        <div class="flex items-center space-x-2">
          <button
            type="button"
            @click="handleImportExcel"
            class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400"
          >
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
            </svg>
            Import Excel
          </button>
          <button
            type="button"
            @click="handleSampleExcel"
            class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400"
          >
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Sample Excel
          </button>
          <button
            type="button"
            @click="handleCopyFrom"
            class="inline-flex items-center px-3 py-1.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400"
          >
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"></path>
            </svg>
            Copy From
          </button>
        </div>
      </div>

      <div class="w-full overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="w-20 px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                Item No.
              </th>
              <th class="w-32 px-2 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                Description
              </th>
              <th class="w-16 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                Qty
              </th>
              <th class="w-14 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                UoM
              </th>
              <th class="w-20 px-2 py-2 text-right text-xs font-medium text-gray-500 uppercase">
                Price
              </th>
              <th class="w-16 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                Disc%
              </th>
              <th class="w-20 px-2 py-2 text-right text-xs font-medium text-gray-500 uppercase">
                Total
              </th>
              <th class="w-12 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                Tax
              </th>
              <th class="w-16 px-2 py-2 text-right text-xs font-medium text-gray-500 uppercase">
                Tax Amt
              </th>
              <th class="w-20 px-2 py-2 text-right text-xs font-medium text-gray-500 uppercase">
                Total Inc
              </th>
              <th class="w-16 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                Dim1
              </th>
              <th class="w-16 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                Dim2
              </th>
              <th class="w-16 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                Dim3
              </th>
              <th class="w-16 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                Dim4
              </th>
              <th class="w-16 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                WH
              </th>
              <th class="w-12 px-2 py-2 text-center text-xs font-medium text-gray-500 uppercase">

              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <tr v-for="(item, index) in formData.lineItems" :key="index">
              <td class="px-2 py-1">
                <input
                  v-model="item.itemCode"
                  type="text"
                  placeholder="Code"
                  class="w-20 text-xs py-1 px-1 border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900 placeholder-gray-700"
                  @input="handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1">
                <input
                  v-model="item.description"
                  type="text"
                  placeholder="Description"
                  class="w-32 text-xs py-1 px-1 border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900 placeholder-gray-700"
                  @input="handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1">
                <input
                  v-model.number="item.quantity"
                  type="number"
                  step="1"
                  min="0"
                  class="w-16 text-xs py-1 px-1 text-center border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900"
                  @input="calculateLineTotal(index); handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1">
                <select
                  v-model="item.uom"
                  class="w-14 text-xs py-1 px-1 border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900"
                  @change="handleLineItemInput(index)"
                >
                  <option value="pcs">pcs</option>
                  <option value="kg">kg</option>
                  <option value="box">box</option>
                  <option value="ltr">ltr</option>
                </select>
              </td>
              <td class="px-2 py-1">
                <input
                  v-model.number="item.unitPrice"
                  type="number"
                  step="0.01"
                  min="0"
                  class="w-20 text-xs py-1 px-1 text-right border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900"
                  @input="calculateLineTotal(index); handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1">
                <input
                  v-model.number="item.discount"
                  type="number"
                  step="0.01"
                  min="0"
                  max="100"
                  class="w-16 text-xs py-1 px-1 text-center border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900"
                  @input="calculateLineTotal(index); handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1 text-right text-xs text-gray-900 font-medium">
                {{ formatCurrency(getLineTotal(item)) }}
              </td>
              <td class="px-2 py-1">
                <select
                  v-model="item.taxCode"
                  class="w-12 text-xs py-1 px-1 border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900"
                  @change="updateTaxRate(index); handleLineItemInput(index)"
                >
                  <option value="EXEMPT">EX</option>
                  <option value="VAT-18">18</option>
                  <option value="VAT-0">0</option>
                </select>
              </td>
              <td class="px-2 py-1 text-right text-xs text-gray-900 font-medium">
                {{ formatCurrency(getTaxAmount(item)) }}
              </td>
              <td class="px-2 py-1 text-right text-xs text-gray-900 font-semibold">
                {{ formatCurrency(getInclusiveTotal(item)) }}
              </td>
              <td class="px-2 py-1">
                <input
                  v-model="item.dimension1"
                  type="text"
                  placeholder="Dim"
                  class="w-16 text-xs py-1 px-1 text-center border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900 placeholder-gray-700"
                  @input="handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1">
                <input
                  v-model="item.dimension2"
                  type="text"
                  placeholder="Dim"
                  class="w-16 text-xs py-1 px-1 text-center border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900 placeholder-gray-700"
                  @input="handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1">
                <input
                  v-model="item.dimension3"
                  type="text"
                  placeholder="Dim"
                  class="w-16 text-xs py-1 px-1 text-center border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900 placeholder-gray-700"
                  @input="handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1">
                <input
                  v-model="item.dimension4"
                  type="text"
                  placeholder="Dim"
                  class="w-16 text-xs py-1 px-1 text-center border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900 placeholder-gray-700"
                  @input="handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1">
                <input
                  v-model="item.warehouse"
                  type="text"
                  placeholder="WH"
                  class="w-16 text-xs py-1 px-1 text-center border-gray-300 rounded focus:border-gray-400 focus:ring-0 text-gray-900 placeholder-gray-700"
                  @input="handleLineItemInput(index)"
                />
              </td>
              <td class="px-2 py-1 text-center">
                <button
                  type="button"
                  @click="removeLineItem(index)"
                  class="text-red-500 hover:text-red-700"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                    ></path>
                  </svg>
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Totals Summary -->
    <div v-if="formData.lineItems.length > 0" class="mt-6 border-t pt-4">
      <div class="flex justify-end">
        <div class="w-80 space-y-2">
          <div class="flex justify-between text-sm">
            <span class="text-gray-900">Total Before Discount:</span>
            <span class="font-medium text-gray-900">{{ formatCurrency(subtotal) }}</span>
          </div>
          <div class="flex justify-between text-sm">
            <span class="text-gray-900">Discount:</span>
            <span class="font-medium text-gray-900">{{ formatCurrency(totalDiscount) }}</span>
          </div>
          <div class="flex justify-between text-sm">
            <span class="text-gray-900">Freight Type:</span>
            <select v-model="formData.freightType" class="w-32 text-sm border-gray-300 rounded-md text-gray-900 focus:border-gray-400 focus:ring-gray-400">
              <option value="Air Freight">Air Freight</option>
              <option value="Sea Freight">Sea Freight</option>
              <option value="Road">Road</option>
            </select>
          </div>
          <div class="flex justify-between text-sm">
            <span class="text-gray-900">Freight Amount:</span>
            <input
              v-model.number="formData.freightAmount"
              type="number"
              step="0.01"
              min="0"
              placeholder="0.00"
              class="w-32 text-sm text-right border-gray-300 rounded-md text-gray-900 placeholder-gray-700 focus:border-gray-400 focus:ring-gray-400"
            />
          </div>
          <div class="flex justify-between text-sm">
            <span class="text-gray-900">Tax:</span>
            <span class="font-medium text-gray-900">{{ formatCurrency(totalTax) }}</span>
          </div>
          <div class="flex justify-between text-base font-bold border-t pt-2">
            <span class="text-gray-900">Total:</span>
            <span class="text-gray-900">{{ formatCurrency(total + (formData.freightAmount || 0)) }}</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Form Actions -->
    <div class="flex justify-end space-x-3 pt-4 border-t">
      <button
        type="button"
        @click="$emit('cancel')"
        class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        Cancel
      </button>
      <button
        type="submit"
        :disabled="!isFormValid"
        class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {{ initialData ? 'Update' : 'Create' }} Invoice
      </button>
    </div>
  </form>
</template>

<script setup lang="ts">
import { ref, computed, watch, onMounted } from 'vue'
import { ApInvoiceType, PaymentTerms, Currency } from '../types'
import type { ApInvoiceFormData } from '../types'

interface Props {
  initialData?: ApInvoiceFormData
}

interface Emits {
  (e: 'submit', data: ApInvoiceFormData): void
  (e: 'cancel'): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()

// Form data
const formData = ref<ApInvoiceFormData>({
  vendorCode: '',
  vendorName: '',
  invoiceNumber: '',
  invoiceDate: '',
  postingDate: '',
  dueDate: '',
  type: ApInvoiceType.STANDARD,
  currency: Currency.USD,
  exchangeRate: 1.0,
  paymentTerms: PaymentTerms.NET_30,
  purchaseOrderNumber: '',
  goodsReceiptNumber: '',
  projectCode: '',
  costCenter: '',
  notes: '',
  freightType: 'Air Freight',
  freightAmount: 0,
  lineItems: [
    { itemCode: '', description: '', quantity: 0, unitPrice: 0, discount: 0, taxCode: 'EXEMPT', taxRate: 0, uom: 'pcs', dimension1: '', dimension2: '', dimension3: '', dimension4: '', warehouse: '', lineTotal: 0 },
    { itemCode: '', description: '', quantity: 0, unitPrice: 0, discount: 0, taxCode: 'EXEMPT', taxRate: 0, uom: 'pcs', dimension1: '', dimension2: '', dimension3: '', dimension4: '', warehouse: '', lineTotal: 0 },
    { itemCode: '', description: '', quantity: 0, unitPrice: 0, discount: 0, taxCode: 'EXEMPT', taxRate: 0, uom: 'pcs', dimension1: '', dimension2: '', dimension3: '', dimension4: '', warehouse: '', lineTotal: 0 },
  ],
})

// Supporting data
const invoiceTypes = Object.values(ApInvoiceType)
const paymentTerms = Object.values(PaymentTerms)
const currencies = Object.values(Currency)

// Mock tax codes
const taxCodes = ref([
  { code: 'VAT', rate: 10 },
  { code: 'GST', rate: 5 },
  { code: 'SALES_TAX', rate: 8.5 },
])

// Watch for initial data changes
watch(
  () => props.initialData,
  (newData) => {
    if (newData) {
      formData.value = { ...newData }
    }
  },
  { immediate: true },
)

// Set default dates on mount and add initial line item
onMounted(() => {
  if (!formData.value.invoiceDate) {
    formData.value.invoiceDate = new Date().toISOString().split('T')[0]
  }
  if (!formData.value.postingDate) {
    formData.value.postingDate = new Date().toISOString().split('T')[0]
  }
  if (!formData.value.dueDate) {
    formData.value.dueDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
      .toISOString()
      .split('T')[0] // 30 days from now
  }
  // Add initial empty line item if no data provided
  if (!props.initialData && formData.value.lineItems.length === 0) {
    addLineItem()
  }
})

// Line item management
const addLineItem = () => {
  formData.value.lineItems.push({
    itemCode: '',
    description: '',
    quantity: 0,
    unitPrice: 0,
    discount: 0,
    taxCode: 'EXEMPT',
    taxRate: 0,
    uom: 'pcs',
    dimension1: '',
    dimension2: '',
    dimension3: '',
    dimension4: '',
    warehouse: '',
    lineTotal: 0,
  })
}

const removeLineItem = (index: number) => {
  formData.value.lineItems.splice(index, 1)
}

const handleLineItemInput = (index: number) => {
  const item = formData.value.lineItems[index]
  // Auto-add new line if user is on the last row and has entered any data
  if (hasLineItemData(item) && index === formData.value.lineItems.length - 1) {
    addLineItem()
  }
}

const hasLineItemData = (item: any): boolean => {
  return item.itemCode.trim() !== '' ||
         item.description.trim() !== '' ||
         item.quantity > 0 ||
         item.unitPrice > 0 ||
         item.discount > 0 ||
         (item.warehouse && item.warehouse.trim() !== '') ||
         (item.project && item.project.trim() !== '')
}

const updateTaxRate = (index: number) => {
  const item = formData.value.lineItems[index]
  const taxCode = taxCodes.value.find((tc) => tc.code === item.taxCode)
  if (taxCode) {
    item.taxPercent = taxCode.rate
    calculateLineTotal(index)
  }
}

const calculateLineTotal = (index: number) => {
  const item = formData.value.lineItems[index]
  if (item.quantity > 0 && item.unitPrice > 0) {
    const subtotal = item.quantity * item.unitPrice
    const discount = subtotal * (item.discountPercent / 100)
    const netAmount = subtotal - discount
    const taxAmount = netAmount * (item.taxPercent / 100)
    // Note: We don't update the item directly as it's readonly in the form data
  }
}

const getLineTotal = (item: any): number => {
  const quantity = item.quantity || 0
  const price = item.unitPrice || 0
  const discount = item.discount || item.discountPercent || 0
  const subtotal = quantity * price
  const discountAmount = subtotal * (discount / 100)
  return subtotal - discountAmount
}

const getTaxAmount = (item: any): number => {
  const lineTotal = getLineTotal(item)
  const taxRate = getTaxRate(item.taxCode)
  return lineTotal * (taxRate / 100)
}

const getInclusiveTotal = (item: any): number => {
  return getLineTotal(item) + getTaxAmount(item)
}

const getTaxRate = (taxCode: string): number => {
  switch (taxCode) {
    case 'VAT-18': return 18
    case 'VAT-0': return 0
    case 'EXEMPT': return 0
    default: return 0
  }
}

// Computed properties
const subtotal = computed(() => {
  return formData.value.lineItems.reduce((sum, item) => {
    return sum + getLineTotal(item)
  }, 0)
})

const totalDiscount = computed(() => {
  return formData.value.lineItems.reduce((sum, item) => {
    const lineSubtotal = item.quantity * item.unitPrice
    return sum + lineSubtotal * (item.discount / 100)
  }, 0)
})

const totalTax = computed(() => {
  return formData.value.lineItems.reduce((sum, item) => {
    return sum + getTaxAmount(item)
  }, 0)
})

const total = computed(() => {
  return subtotal.value - totalDiscount.value + totalTax.value
})

const isFormValid = computed(() => {
  return (
    formData.value.vendorCode &&
    formData.value.vendorName &&
    formData.value.invoiceNumber &&
    formData.value.invoiceDate &&
    formData.value.postingDate &&
    formData.value.dueDate &&
    formData.value.type &&
    formData.value.currency &&
    formData.value.exchangeRate > 0 &&
    formData.value.paymentTerms &&
    formData.value.lineItems.length > 0 &&
    formData.value.lineItems.every(
      (item) =>
        item.itemCode &&
        item.description &&
        item.quantity > 0 &&
        item.unitPrice >= 0 &&
        item.discountPercent >= 0 &&
        item.discountPercent <= 100 &&
        item.taxPercent >= 0,
    )
  )
})

// Form submission
const handleSubmit = () => {
  if (isFormValid.value) {
    emit('submit', formData.value)
  }
}

// Utility functions
const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
  }).format(amount)
}

const formatInvoiceType = (type: ApInvoiceType): string => {
  return type.replace(/_/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase())
}

const formatPaymentTerms = (terms: PaymentTerms): string => {
  return terms.replace(/_/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase())
}
</script>
